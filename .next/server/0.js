exports.ids = [0];
exports.modules = {

/***/ "./db.js":
/*!***************!*\
  !*** ./db.js ***!
  \***************/
/*! exports provided: getPlaces, selectUserByUsername, insertUser, selectSessionByToken, deleteSessionByToken, insertSession, insertJourney, insertEntries */
/***/ (function(module, __webpack_exports__, __webpack_require__) {

"use strict";
eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, \"getPlaces\", function() { return getPlaces; });\n/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, \"selectUserByUsername\", function() { return selectUserByUsername; });\n/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, \"insertUser\", function() { return insertUser; });\n/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, \"selectSessionByToken\", function() { return selectSessionByToken; });\n/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, \"deleteSessionByToken\", function() { return deleteSessionByToken; });\n/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, \"insertSession\", function() { return insertSession; });\n/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, \"insertJourney\", function() { return insertJourney; });\n/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, \"insertEntries\", function() { return insertEntries; });\n__webpack_require__(/*! dotenv */ \"dotenv\").config();\n\nconst argon2 = __webpack_require__(/*! argon2 */ \"argon2\");\n\nconst postgres = __webpack_require__(/*! postgres */ \"postgres\");\n\nconst sql = postgres();\nasync function getPlaces() {\n  const places = await sql`\n    select * from places\n  `;\n  return places;\n}\nasync function selectUserByUsername(username, password) {\n  const usersWithUsername = await sql`\n  SELECT * FROM users WHERE username = ${username}\n  `; //select from always returns an array, even if its one\n  // console.log(usersWithUsername[0]);\n\n  if (usersWithUsername.length === 0) return usersWithUsername;\n  const passwordMatches = await argon2.verify(usersWithUsername[0].password_hash, password); //this returns boolean\n\n  if (passwordMatches) {\n    return usersWithUsername;\n  } else {\n    return [];\n  }\n}\nasync function insertUser(username, passwordHash) {\n  return sql`\n    INSERT INTO users (username, password_hash) VALUES (${username}, ${passwordHash})\n  `;\n}\nasync function selectSessionByToken(token) {\n  return sql`\n    SELECT * FROM sessions WHERE token = ${token}\n  `;\n}\nasync function deleteSessionByToken(token) {\n  return sql`\n    DELETE FROM sessions WHERE token = ${token}\n  `;\n}\nasync function insertSession(userId, token) {\n  return sql`\n    INSERT INTO sessions (user_id, token) VALUES (${userId}, ${token})\n  `;\n}\nasync function insertJourney(startDate, endDate, token) {\n  const search = await sql`\n    SELECT user_id FROM sessions WHERE token = ${token}\n  `;\n  console.log(search);\n  const userId = search[0].user_id;\n  return sql`\n    INSERT INTO journeys (start_date, end_date, user_id) VALUES (${startDate}, ${endDate}, ${userId}) RETURNING id, start_date, end_date, user_id\n  `;\n}\nasync function insertEntries(placeIds, journeyId) {\n  // const eachTag = placeIds;\n  // const lala = eachTag.forEach((element) => console.log(element));\n  // selectedTags shows me a places_id column where tags_id is 7 for all of them\n  const selectedTags = await sql`\n    SELECT places_id FROM places_tags WHERE tags_id = ${placeIds[0]}\n  `; // tag gives a random number from the places_id column\n\n  const tag = Object.values(selectedTags[Math.floor(Math.random() * selectedTags.length)]); // it works\n\n  const tagArray = await sql`\n    SELECT (name, address, image, description) FROM places WHERE id = ${tag} \n  `;\n  console.log('tagArray', tagArray);\n  return sql`\n    INSERT INTO entries (journey_id, place_id) VALUES (${journeyId}, ${tag}) \n  `;\n}//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbIndlYnBhY2s6Ly8vLi9kYi5qcz8yNmY1Il0sIm5hbWVzIjpbInJlcXVpcmUiLCJjb25maWciLCJhcmdvbjIiLCJwb3N0Z3JlcyIsInNxbCIsImdldFBsYWNlcyIsInBsYWNlcyIsInNlbGVjdFVzZXJCeVVzZXJuYW1lIiwidXNlcm5hbWUiLCJwYXNzd29yZCIsInVzZXJzV2l0aFVzZXJuYW1lIiwibGVuZ3RoIiwicGFzc3dvcmRNYXRjaGVzIiwidmVyaWZ5IiwicGFzc3dvcmRfaGFzaCIsImluc2VydFVzZXIiLCJwYXNzd29yZEhhc2giLCJzZWxlY3RTZXNzaW9uQnlUb2tlbiIsInRva2VuIiwiZGVsZXRlU2Vzc2lvbkJ5VG9rZW4iLCJpbnNlcnRTZXNzaW9uIiwidXNlcklkIiwiaW5zZXJ0Sm91cm5leSIsInN0YXJ0RGF0ZSIsImVuZERhdGUiLCJzZWFyY2giLCJjb25zb2xlIiwibG9nIiwidXNlcl9pZCIsImluc2VydEVudHJpZXMiLCJwbGFjZUlkcyIsImpvdXJuZXlJZCIsInNlbGVjdGVkVGFncyIsInRhZyIsIk9iamVjdCIsInZhbHVlcyIsIk1hdGgiLCJmbG9vciIsInJhbmRvbSIsInRhZ0FycmF5Il0sIm1hcHBpbmdzIjoiQUFBQUE7QUFBQUE7QUFBQUE7QUFBQUE7QUFBQUE7QUFBQUE7QUFBQUE7QUFBQUE7QUFBQUE7QUFBQUEsbUJBQU8sQ0FBQyxzQkFBRCxDQUFQLENBQWtCQyxNQUFsQjs7QUFFQSxNQUFNQyxNQUFNLEdBQUdGLG1CQUFPLENBQUMsc0JBQUQsQ0FBdEI7O0FBQ0EsTUFBTUcsUUFBUSxHQUFHSCxtQkFBTyxDQUFDLDBCQUFELENBQXhCOztBQUNBLE1BQU1JLEdBQUcsR0FBR0QsUUFBUSxFQUFwQjtBQUVPLGVBQWVFLFNBQWYsR0FBMkI7QUFDaEMsUUFBTUMsTUFBTSxHQUFHLE1BQU1GLEdBQUk7O0dBQXpCO0FBR0EsU0FBT0UsTUFBUDtBQUNEO0FBRU0sZUFBZUMsb0JBQWYsQ0FBb0NDLFFBQXBDLEVBQThDQyxRQUE5QyxFQUF3RDtBQUM3RCxRQUFNQyxpQkFBaUIsR0FBRyxNQUFNTixHQUFJO3lDQUNHSSxRQUFTO0dBRGhELENBRDZELENBRzFEO0FBQ0g7O0FBQ0EsTUFBSUUsaUJBQWlCLENBQUNDLE1BQWxCLEtBQTZCLENBQWpDLEVBQW9DLE9BQU9ELGlCQUFQO0FBQ3BDLFFBQU1FLGVBQWUsR0FBRyxNQUFNVixNQUFNLENBQUNXLE1BQVAsQ0FDNUJILGlCQUFpQixDQUFDLENBQUQsQ0FBakIsQ0FBcUJJLGFBRE8sRUFFNUJMLFFBRjRCLENBQTlCLENBTjZELENBUzFEOztBQUNILE1BQUlHLGVBQUosRUFBcUI7QUFDbkIsV0FBT0YsaUJBQVA7QUFDRCxHQUZELE1BRU87QUFDTCxXQUFPLEVBQVA7QUFDRDtBQUNGO0FBRU0sZUFBZUssVUFBZixDQUEwQlAsUUFBMUIsRUFBb0NRLFlBQXBDLEVBQWtEO0FBQ3ZELFNBQU9aLEdBQUk7MERBQzZDSSxRQUFTLEtBQUlRLFlBQWE7R0FEbEY7QUFHRDtBQUVNLGVBQWVDLG9CQUFmLENBQW9DQyxLQUFwQyxFQUEyQztBQUNoRCxTQUFPZCxHQUFJOzJDQUM4QmMsS0FBTTtHQUQvQztBQUdEO0FBRU0sZUFBZUMsb0JBQWYsQ0FBb0NELEtBQXBDLEVBQTJDO0FBQ2hELFNBQU9kLEdBQUk7eUNBQzRCYyxLQUFNO0dBRDdDO0FBR0Q7QUFFTSxlQUFlRSxhQUFmLENBQTZCQyxNQUE3QixFQUFxQ0gsS0FBckMsRUFBNEM7QUFDakQsU0FBT2QsR0FBSTtvREFDdUNpQixNQUFPLEtBQUlILEtBQU07R0FEbkU7QUFHRDtBQUVNLGVBQWVJLGFBQWYsQ0FBNkJDLFNBQTdCLEVBQXdDQyxPQUF4QyxFQUFpRE4sS0FBakQsRUFBd0Q7QUFDN0QsUUFBTU8sTUFBTSxHQUFHLE1BQU1yQixHQUFJO2lEQUNzQmMsS0FBTTtHQURyRDtBQUdBUSxTQUFPLENBQUNDLEdBQVIsQ0FBWUYsTUFBWjtBQUVBLFFBQU1KLE1BQU0sR0FBR0ksTUFBTSxDQUFDLENBQUQsQ0FBTixDQUFVRyxPQUF6QjtBQUVBLFNBQU94QixHQUFJO21FQUNzRG1CLFNBQVUsS0FBSUMsT0FBUSxLQUFJSCxNQUFPO0dBRGxHO0FBR0Q7QUFFTSxlQUFlUSxhQUFmLENBQTZCQyxRQUE3QixFQUF1Q0MsU0FBdkMsRUFBa0Q7QUFDdkQ7QUFDQTtBQUVBO0FBQ0EsUUFBTUMsWUFBWSxHQUFHLE1BQU01QixHQUFJO3dEQUN1QjBCLFFBQVEsQ0FBQyxDQUFELENBQUk7R0FEbEUsQ0FMdUQsQ0FTdkQ7O0FBRUEsUUFBTUcsR0FBRyxHQUFHQyxNQUFNLENBQUNDLE1BQVAsQ0FDVkgsWUFBWSxDQUFDSSxJQUFJLENBQUNDLEtBQUwsQ0FBV0QsSUFBSSxDQUFDRSxNQUFMLEtBQWdCTixZQUFZLENBQUNyQixNQUF4QyxDQUFELENBREYsQ0FBWixDQVh1RCxDQWV2RDs7QUFDQSxRQUFNNEIsUUFBUSxHQUFHLE1BQU1uQyxHQUFJO3dFQUMyQzZCLEdBQUk7R0FEMUU7QUFJQVAsU0FBTyxDQUFDQyxHQUFSLENBQVksVUFBWixFQUF3QlksUUFBeEI7QUFFQSxTQUFPbkMsR0FBSTt5REFDNEMyQixTQUFVLEtBQUlFLEdBQUk7R0FEekU7QUFHRCIsImZpbGUiOiIuL2RiLmpzLmpzIiwic291cmNlc0NvbnRlbnQiOlsicmVxdWlyZSgnZG90ZW52JykuY29uZmlnKCk7XG5cbmNvbnN0IGFyZ29uMiA9IHJlcXVpcmUoJ2FyZ29uMicpO1xuY29uc3QgcG9zdGdyZXMgPSByZXF1aXJlKCdwb3N0Z3JlcycpO1xuY29uc3Qgc3FsID0gcG9zdGdyZXMoKTtcblxuZXhwb3J0IGFzeW5jIGZ1bmN0aW9uIGdldFBsYWNlcygpIHtcbiAgY29uc3QgcGxhY2VzID0gYXdhaXQgc3FsYFxuICAgIHNlbGVjdCAqIGZyb20gcGxhY2VzXG4gIGA7XG4gIHJldHVybiBwbGFjZXM7XG59XG5cbmV4cG9ydCBhc3luYyBmdW5jdGlvbiBzZWxlY3RVc2VyQnlVc2VybmFtZSh1c2VybmFtZSwgcGFzc3dvcmQpIHtcbiAgY29uc3QgdXNlcnNXaXRoVXNlcm5hbWUgPSBhd2FpdCBzcWxgXG4gIFNFTEVDVCAqIEZST00gdXNlcnMgV0hFUkUgdXNlcm5hbWUgPSAke3VzZXJuYW1lfVxuICBgOyAvL3NlbGVjdCBmcm9tIGFsd2F5cyByZXR1cm5zIGFuIGFycmF5LCBldmVuIGlmIGl0cyBvbmVcbiAgLy8gY29uc29sZS5sb2codXNlcnNXaXRoVXNlcm5hbWVbMF0pO1xuICBpZiAodXNlcnNXaXRoVXNlcm5hbWUubGVuZ3RoID09PSAwKSByZXR1cm4gdXNlcnNXaXRoVXNlcm5hbWU7XG4gIGNvbnN0IHBhc3N3b3JkTWF0Y2hlcyA9IGF3YWl0IGFyZ29uMi52ZXJpZnkoXG4gICAgdXNlcnNXaXRoVXNlcm5hbWVbMF0ucGFzc3dvcmRfaGFzaCxcbiAgICBwYXNzd29yZCxcbiAgKTsgLy90aGlzIHJldHVybnMgYm9vbGVhblxuICBpZiAocGFzc3dvcmRNYXRjaGVzKSB7XG4gICAgcmV0dXJuIHVzZXJzV2l0aFVzZXJuYW1lO1xuICB9IGVsc2Uge1xuICAgIHJldHVybiBbXTtcbiAgfVxufVxuXG5leHBvcnQgYXN5bmMgZnVuY3Rpb24gaW5zZXJ0VXNlcih1c2VybmFtZSwgcGFzc3dvcmRIYXNoKSB7XG4gIHJldHVybiBzcWxgXG4gICAgSU5TRVJUIElOVE8gdXNlcnMgKHVzZXJuYW1lLCBwYXNzd29yZF9oYXNoKSBWQUxVRVMgKCR7dXNlcm5hbWV9LCAke3Bhc3N3b3JkSGFzaH0pXG4gIGA7XG59XG5cbmV4cG9ydCBhc3luYyBmdW5jdGlvbiBzZWxlY3RTZXNzaW9uQnlUb2tlbih0b2tlbikge1xuICByZXR1cm4gc3FsYFxuICAgIFNFTEVDVCAqIEZST00gc2Vzc2lvbnMgV0hFUkUgdG9rZW4gPSAke3Rva2VufVxuICBgO1xufVxuXG5leHBvcnQgYXN5bmMgZnVuY3Rpb24gZGVsZXRlU2Vzc2lvbkJ5VG9rZW4odG9rZW4pIHtcbiAgcmV0dXJuIHNxbGBcbiAgICBERUxFVEUgRlJPTSBzZXNzaW9ucyBXSEVSRSB0b2tlbiA9ICR7dG9rZW59XG4gIGA7XG59XG5cbmV4cG9ydCBhc3luYyBmdW5jdGlvbiBpbnNlcnRTZXNzaW9uKHVzZXJJZCwgdG9rZW4pIHtcbiAgcmV0dXJuIHNxbGBcbiAgICBJTlNFUlQgSU5UTyBzZXNzaW9ucyAodXNlcl9pZCwgdG9rZW4pIFZBTFVFUyAoJHt1c2VySWR9LCAke3Rva2VufSlcbiAgYDtcbn1cblxuZXhwb3J0IGFzeW5jIGZ1bmN0aW9uIGluc2VydEpvdXJuZXkoc3RhcnREYXRlLCBlbmREYXRlLCB0b2tlbikge1xuICBjb25zdCBzZWFyY2ggPSBhd2FpdCBzcWxgXG4gICAgU0VMRUNUIHVzZXJfaWQgRlJPTSBzZXNzaW9ucyBXSEVSRSB0b2tlbiA9ICR7dG9rZW59XG4gIGA7XG4gIGNvbnNvbGUubG9nKHNlYXJjaCk7XG5cbiAgY29uc3QgdXNlcklkID0gc2VhcmNoWzBdLnVzZXJfaWQ7XG5cbiAgcmV0dXJuIHNxbGBcbiAgICBJTlNFUlQgSU5UTyBqb3VybmV5cyAoc3RhcnRfZGF0ZSwgZW5kX2RhdGUsIHVzZXJfaWQpIFZBTFVFUyAoJHtzdGFydERhdGV9LCAke2VuZERhdGV9LCAke3VzZXJJZH0pIFJFVFVSTklORyBpZCwgc3RhcnRfZGF0ZSwgZW5kX2RhdGUsIHVzZXJfaWRcbiAgYDtcbn1cblxuZXhwb3J0IGFzeW5jIGZ1bmN0aW9uIGluc2VydEVudHJpZXMocGxhY2VJZHMsIGpvdXJuZXlJZCkge1xuICAvLyBjb25zdCBlYWNoVGFnID0gcGxhY2VJZHM7XG4gIC8vIGNvbnN0IGxhbGEgPSBlYWNoVGFnLmZvckVhY2goKGVsZW1lbnQpID0+IGNvbnNvbGUubG9nKGVsZW1lbnQpKTtcblxuICAvLyBzZWxlY3RlZFRhZ3Mgc2hvd3MgbWUgYSBwbGFjZXNfaWQgY29sdW1uIHdoZXJlIHRhZ3NfaWQgaXMgNyBmb3IgYWxsIG9mIHRoZW1cbiAgY29uc3Qgc2VsZWN0ZWRUYWdzID0gYXdhaXQgc3FsYFxuICAgIFNFTEVDVCBwbGFjZXNfaWQgRlJPTSBwbGFjZXNfdGFncyBXSEVSRSB0YWdzX2lkID0gJHtwbGFjZUlkc1swXX1cbiAgYDtcblxuICAvLyB0YWcgZ2l2ZXMgYSByYW5kb20gbnVtYmVyIGZyb20gdGhlIHBsYWNlc19pZCBjb2x1bW5cblxuICBjb25zdCB0YWcgPSBPYmplY3QudmFsdWVzKFxuICAgIHNlbGVjdGVkVGFnc1tNYXRoLmZsb29yKE1hdGgucmFuZG9tKCkgKiBzZWxlY3RlZFRhZ3MubGVuZ3RoKV0sXG4gICk7XG5cbiAgLy8gaXQgd29ya3NcbiAgY29uc3QgdGFnQXJyYXkgPSBhd2FpdCBzcWxgXG4gICAgU0VMRUNUIChuYW1lLCBhZGRyZXNzLCBpbWFnZSwgZGVzY3JpcHRpb24pIEZST00gcGxhY2VzIFdIRVJFIGlkID0gJHt0YWd9IFxuICBgO1xuXG4gIGNvbnNvbGUubG9nKCd0YWdBcnJheScsIHRhZ0FycmF5KTtcblxuICByZXR1cm4gc3FsYFxuICAgIElOU0VSVCBJTlRPIGVudHJpZXMgKGpvdXJuZXlfaWQsIHBsYWNlX2lkKSBWQUxVRVMgKCR7am91cm5leUlkfSwgJHt0YWd9KSBcbiAgYDtcbn1cbiJdLCJzb3VyY2VSb290IjoiIn0=\n//# sourceURL=webpack-internal:///./db.js\n");

/***/ })

};;