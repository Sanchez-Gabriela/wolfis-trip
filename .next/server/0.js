exports.ids = [0];
exports.modules = {

/***/ "./db.js":
/*!***************!*\
  !*** ./db.js ***!
  \***************/
/*! exports provided: getPlaces, selectUserByUsername, insertUser, selectSessionByToken, deleteSessionByToken, insertSession, insertJourney, insertEntries, sessionsJoinENtries, personalizedPlan */
/***/ (function(module, __webpack_exports__, __webpack_require__) {

"use strict";
eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, \"getPlaces\", function() { return getPlaces; });\n/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, \"selectUserByUsername\", function() { return selectUserByUsername; });\n/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, \"insertUser\", function() { return insertUser; });\n/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, \"selectSessionByToken\", function() { return selectSessionByToken; });\n/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, \"deleteSessionByToken\", function() { return deleteSessionByToken; });\n/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, \"insertSession\", function() { return insertSession; });\n/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, \"insertJourney\", function() { return insertJourney; });\n/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, \"insertEntries\", function() { return insertEntries; });\n/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, \"sessionsJoinENtries\", function() { return sessionsJoinENtries; });\n/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, \"personalizedPlan\", function() { return personalizedPlan; });\n__webpack_require__(/*! dotenv */ \"dotenv\").config();\n\nconst argon2 = __webpack_require__(/*! argon2 */ \"argon2\");\n\nconst postgres = __webpack_require__(/*! postgres */ \"postgres\");\n\nconst sql = postgres();\nasync function getPlaces() {\n  const places = await sql`\n    select * from places\n  `;\n  return places;\n}\nasync function selectUserByUsername(username, password) {\n  const usersWithUsername = await sql`\n  SELECT * FROM users WHERE username = ${username}\n  `; //select from always returns an array, even if its one\n  // console.log(usersWithUsername[0]);\n\n  if (usersWithUsername.length === 0) return usersWithUsername;\n  const passwordMatches = await argon2.verify(usersWithUsername[0].password_hash, password); //this returns boolean\n\n  if (passwordMatches) {\n    return usersWithUsername;\n  } else {\n    return [];\n  }\n}\nasync function insertUser(username, passwordHash) {\n  return sql`\n    INSERT INTO users (username, password_hash) VALUES (${username}, ${passwordHash})\n  `;\n}\nasync function selectSessionByToken(token) {\n  return sql`\n    SELECT * FROM sessions WHERE token = ${token}\n  `;\n}\nasync function deleteSessionByToken(token) {\n  return sql`\n    DELETE FROM sessions WHERE token = ${token}\n  `;\n}\nasync function insertSession(userId, token) {\n  return sql`\n    INSERT INTO sessions (user_id, token) VALUES (${userId}, ${token})\n  `;\n}\nasync function insertJourney(startDate, endDate, token) {\n  const search = await sql`\n    SELECT user_id FROM sessions WHERE token = ${token}\n  `;\n  console.log(search);\n  const userId = search[0].user_id;\n  return sql`\n    INSERT INTO journeys (start_date, end_date, user_id) VALUES (${startDate}, ${endDate}, ${userId}) RETURNING id, start_date, end_date, user_id\n  `;\n}\n\nfunction getRandomItem(arr) {\n  return arr[Math.floor(Math.random() * arr.length)];\n}\n\nasync function insertEntries(tagIds, journeyId) {\n  // selectedTags shows me places_id column based tags_id\n  const placesAndTags = await sql`\n    SELECT places_id, tags_id FROM places_tags WHERE tags_id IN (${tagIds})\n  `;\n  console.log('placesandTags:', placesAndTags);\n  console.log('tagIds', tagIds); // tag gives a random number from the places_id column\n\n  const selectedPlacesAndTags = [];\n  tagIds.forEach(tagId => {\n    // these are the placesIds based on the tagId\n    const placesByTag = placesAndTags.filter(placeAndTag => {\n      return placeAndTag.tags_id === Number(tagId);\n    });\n    const selectedPlaceAndTag = getRandomItem(placesByTag);\n    selectedPlacesAndTags.push(selectedPlaceAndTag);\n    console.log('selectedplaces:', selectedPlacesAndTags);\n  });\n  console.log('selectedplaces:', selectedPlacesAndTags);\n  const places = selectedPlacesAndTags.map(place_id => {\n    console.log(place_id);\n    return place_id.places_id;\n  });\n  console.log('places', places);\n  const tagArray = await sql`\n    SELECT name, address, image, description FROM places WHERE id IN (${places}) \n  `;\n  console.log('tagArray', tagArray);\n  await sql`\n    INSERT INTO journeys_places (journey_id, place_id)\n    SELECT ${journeyId}, x\n      FROM unnest(ARRAY[${places}]) x\n  `;\n  return tagArray;\n}\nasync function sessionsJoinENtries(token) {\n  const trip = await sql`\n    SELECT \n      journeys.id as journey_id\n    FROM \n      sessions,\n      users,\n      journeys\n    WHERE \n      sessions.token = ${token} AND\n      users.id = sessions.user_id AND\n      journeys.user_id = users.id;\n  `;\n  console.log('meme', trip);\n  return trip;\n}\nasync function personalizedPlan(journeyId) {\n  const plan = await sql`\n    SELECT \n      places.name,  \n      places.address, \n      places.image,\n      places.description \n    FROM \n      places,\n      journeys_places \n    WHERE \n      places.id = journeys_places.place_id AND \n      journeys_places.journey_id = ${journeyId}\n  `;\n  return plan;\n} // export async function personalizedPlan(places) {\n//   const plan = await sql`\n//     SELECT * FROM places WHERE\n//   `;\n// }\n// export async function selectUserByUsername(username, password) {\n//   const usersWithUsername = await sql`\n//   SELECT * FROM users WHERE username = ${username}\n//   `; //select from always returns an array, even if its one\n//   // console.log(usersWithUsername[0]);\n//   if (usersWithUsername.length === 0) return usersWithUsername;\n//   const passwordMatches = await argon2.verify(\n//     usersWithUsername[0].password_hash,\n//     password,\n//   ); //this returns boolean\n//   if (passwordMatches) {\n//     return usersWithUsername;\n//   } else {\n//     return [];\n//   }\n// }//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///./db.js\n");

/***/ })

};;