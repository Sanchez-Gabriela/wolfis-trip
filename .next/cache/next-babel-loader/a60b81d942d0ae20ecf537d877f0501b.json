{"ast":null,"code":"import React from \"react\";\nvar __jsx = React.createElement;\n\nfunction ownKeys(object, enumerableOnly) { var keys = Object.keys(object); if (Object.getOwnPropertySymbols) { var symbols = Object.getOwnPropertySymbols(object); if (enumerableOnly) symbols = symbols.filter(function (sym) { return Object.getOwnPropertyDescriptor(object, sym).enumerable; }); keys.push.apply(keys, symbols); } return keys; }\n\nfunction _objectSpread(target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i] != null ? arguments[i] : {}; if (i % 2) { ownKeys(Object(source), true).forEach(function (key) { _defineProperty(target, key, source[key]); }); } else if (Object.getOwnPropertyDescriptors) { Object.defineProperties(target, Object.getOwnPropertyDescriptors(source)); } else { ownKeys(Object(source)).forEach(function (key) { Object.defineProperty(target, key, Object.getOwnPropertyDescriptor(source, key)); }); } } return target; }\n\nfunction _defineProperty(obj, key, value) { if (key in obj) { Object.defineProperty(obj, key, { value: value, enumerable: true, configurable: true, writable: true }); } else { obj[key] = value; } return obj; }\n\n/** @jsx jsx */\nimport { useState } from 'react';\nimport { useDatepicker, START_DATE } from '@datepicker-react/hooks';\nimport { jsx } from '@emotion/core';\nimport Month from './Month';\nimport NavButton from './NavButton';\nimport DatepickerContext from './datepickerContext';\n\nfunction Datepicker() {\n  const {\n    0: state,\n    1: setState\n  } = useState({\n    startDate: null,\n    endDate: null,\n    focusedInput: START_DATE\n  });\n  const {\n    firstDayOfWeek,\n    activeMonths,\n    isDateSelected,\n    isDateHovered,\n    isFirstOrLastSelectedDate,\n    isDateBlocked,\n    isDateFocused,\n    focusedDate,\n    onDateHover,\n    onDateSelect,\n    onDateFocus,\n    goToPreviousMonths,\n    goToNextMonths\n  } = useDatepicker({\n    startDate: state.startDate,\n    endDate: state.endDate,\n    focusedInput: state.focusedInput,\n    onDatesChange: handleDateChange\n  });\n\n  function handleDateChange(data) {\n    if (!data.focusedInput) {\n      setState(_objectSpread(_objectSpread({}, data), {}, {\n        focusedInput: START_DATE\n      }));\n    } else {\n      setState(data);\n    }\n  }\n\n  return jsx(DatepickerContext.Provider, {\n    value: {\n      focusedDate,\n      isDateFocused,\n      isDateSelected,\n      isDateHovered,\n      isDateBlocked,\n      isFirstOrLastSelectedDate,\n      onDateSelect,\n      onDateFocus,\n      onDateHover\n    }\n  }, jsx(\"div\", null, jsx(\"strong\", null, \"Focused input: \"), state.focusedInput), jsx(\"br\", null), jsx(\"div\", null, jsx(\"strong\", null, \"Start date: \"), state.startDate && state.startDate.toLocaleString()), jsx(\"br\", null), jsx(\"div\", null, jsx(\"strong\", null, \"End date: \"), state.endDate && state.endDate.toLocaleString()), jsx(\"br\", null), jsx(\"strong\", null), jsx(NavButton, {\n    onClick: goToPreviousMonths\n  }, \"Previous\"), jsx(NavButton, {\n    onClick: goToNextMonths\n  }, \"Next\"), jsx(\"div\", {\n    css: {\n      fontFamily: 'Karla',\n      display: 'grid',\n      margin: '32px 0 0',\n      gridTemplateColumns: `repeat(${activeMonths.length}, 300px)`,\n      gridGap: '0 64px'\n    }\n  }, activeMonths.map(month => jsx(Month, {\n    key: `${month.year}-${month.month}`,\n    year: month.year,\n    month: month.month,\n    firstDayOfWeek: firstDayOfWeek\n  }))));\n}\n\nexport default Datepicker;","map":null,"metadata":{},"sourceType":"module"}