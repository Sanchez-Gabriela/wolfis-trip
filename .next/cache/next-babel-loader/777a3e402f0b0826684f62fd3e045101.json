{"ast":null,"code":"var _jsxFileName = \"/Users/gabrielasanchez/projects/wolfis-trip/pages/register.tsx\";\nvar __jsx = React.createElement;\nimport React from 'react';\nimport Head from 'next/head';\nimport Header from '../components/Header';\nexport var __N_SSP = true;\nexport default function Register(props) {\n  return __jsx(React.Fragment, null, __jsx(Head, {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 13,\n      columnNumber: 7\n    }\n  }, __jsx(\"title\", {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 14,\n      columnNumber: 9\n    }\n  }, \"Register\")), __jsx(Header, {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 17,\n      columnNumber: 7\n    }\n  }), __jsx(\"h1\", {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 19,\n      columnNumber: 7\n    }\n  }, \"Register\"), __jsx(\"form\", {\n    method: \"POST\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 21,\n      columnNumber: 7\n    }\n  }, __jsx(\"input\", {\n    name: \"username\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 22,\n      columnNumber: 9\n    }\n  }), __jsx(\"input\", {\n    name: \"password\",\n    type: \"password\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 23,\n      columnNumber: 9\n    }\n  }), __jsx(\"input\", {\n    type: \"hidden\",\n    name: \"csrf\",\n    value: props.csrfToken,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 24,\n      columnNumber: 9\n    }\n  }), __jsx(\"button\", {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 25,\n      columnNumber: 9\n    }\n  }, \"Register\")));\n}\n_c = Register;\n\nvar _c;\n\n$RefreshReg$(_c, \"Register\");","map":{"version":3,"sources":["/Users/gabrielasanchez/projects/wolfis-trip/pages/register.tsx"],"names":["React","Head","Header","Register","props","csrfToken"],"mappings":";;AAAA,OAAOA,KAAP,MAAkB,OAAlB;AAEA,OAAOC,IAAP,MAAiB,WAAjB;AACA,OAAOC,MAAP,MAAmB,sBAAnB;;AAMA,eAAe,SAASC,QAAT,CAAkBC,KAAlB,EAAgC;AAC7C,SACE,4BACE,MAAC,IAAD;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,KACE;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,gBADF,CADF,EAKE,MAAC,MAAD;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,IALF,EAOE;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,gBAPF,EASE;AAAM,IAAA,MAAM,EAAC,MAAb;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,KACE;AAAO,IAAA,IAAI,EAAC,UAAZ;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,IADF,EAEE;AAAO,IAAA,IAAI,EAAC,UAAZ;AAAuB,IAAA,IAAI,EAAC,UAA5B;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,IAFF,EAGE;AAAO,IAAA,IAAI,EAAC,QAAZ;AAAqB,IAAA,IAAI,EAAC,MAA1B;AAAiC,IAAA,KAAK,EAAEA,KAAK,CAACC,SAA9C;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,IAHF,EAIE;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,gBAJF,CATF,CADF;AAkBD;KAnBuBF,Q","sourcesContent":["import React from 'react';\nimport { GetServerSidePropsContext } from 'next';\nimport Head from 'next/head';\nimport Header from '../components/Header';\n\ntype Props = {\n  csrfToken: string;\n};\n\nexport default function Register(props: Props) {\n  return (\n    <>\n      <Head>\n        <title>Register</title>\n      </Head>\n\n      <Header />\n\n      <h1>Register</h1>\n\n      <form method=\"POST\">\n        <input name=\"username\" />\n        <input name=\"password\" type=\"password\" />\n        <input type=\"hidden\" name=\"csrf\" value={props.csrfToken} />\n        <button>Register</button>\n      </form>\n    </>\n  );\n}\n\nexport async function getServerSideProps(context: GetServerSidePropsContext) {\n  // TODO: Do this in an API Route instead!\n  //\n  // This also helps to avoid all of the buffer code\n  // and the query-string dependency below!\n\n  const queryString = await import('query-string');\n  const { insertUser } = await import('../db');\n  const { hashPassword } = await import('../hashing');\n\n  const Tokens = (await import('csrf')).default;\n  const tokens = new Tokens();\n\n  const secret = process.env.CSRF_TOKEN;\n  if (typeof secret !== 'string') {\n    throw new Error('Token secret misconfigured!');\n  }\n\n  let buffer = '';\n\n  context.req.on('data', (chunk) => {\n    buffer += chunk;\n  });\n\n  context.req.on('end', async () => {\n    const body = queryString.parse(Buffer.from(buffer).toString());\n\n    if (\n      typeof body.username !== 'string' ||\n      typeof body.password !== 'string'\n    ) {\n      console.log('No username or password passed in body');\n      return;\n    }\n\n    const username = body.username;\n    const passwordHash = await hashPassword(body.password);\n\n    const requestToken = body.csrf;\n\n    if (typeof requestToken !== 'string') {\n      throw new Error('No CSRF token passed!');\n    }\n\n    if (tokens.verify(secret, requestToken)) {\n      // console.log(user);\n      insertUser(username, passwordHash)\n        .then(() => console.log('succeeded'))\n        .catch((err) => console.error(\"didn't work\", err));\n    } else {\n      console.error('CSRF token not valid!!');\n    }\n  });\n\n  const props: Props = {\n    csrfToken: tokens.create(secret),\n  };\n\n  return {\n    props,\n  };\n}\n"]},"metadata":{},"sourceType":"module"}