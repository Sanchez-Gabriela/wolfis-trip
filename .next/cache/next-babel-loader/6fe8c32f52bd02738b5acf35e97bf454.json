{"ast":null,"code":"import crypto from 'crypto';\nimport { selectUserByUsername } from '../../db';\nimport { verifyHashMatchesPassword } from '../../hashing';\nexport default async function login(req, res) {\n  // TODO: To secure your application even further,\n  // accept a CSRF token here and verify it\n  // (see pages/register.tsx)\n  const username = req.body.username;\n  const password = req.body.password;\n  const users = await selectUserByUsername(username, password);\n  console.log(req.body.username);\n\n  if (users.length === 0) {\n    console.log('denied login - zero users with that username');\n    res.json({\n      loggedIn: false\n    });\n    return;\n  }\n\n  if (!(await verifyHashMatchesPassword(users[0].password_hash, password))) {\n    console.log(\"denied login - password doesn't match\");\n    res.json({\n      loggedIn: false\n    });\n    return;\n  }\n\n  console.log('verifyHasMatchesPassword');\n  console.log('logged in');\n  const maxAge = 60 * 60 * 8; // 8 hours\n\n  const token = crypto.randomBytes(24).toString('base64'); // await insertSession(users[0].id, token);\n  // const cookie = serialize('token', token, {\n  //   maxAge,\n  //   expires: new Date(Date.now() + maxAge * 1000),\n  // Important for security\n  // Deny cookie access from JavaScript\n  // httpOnly: true,\n  // Important for security\n  // Set secure cookies on production\n  //   secure: process.env.NODE_ENV === 'production',\n  //   path: '/',\n  //   sameSite: 'lax',\n  // });\n  // TODO: In order to prevent your database\n  // from overflowing with sessions, you should\n  // remove the old sessions here.\n  // res.setHeader('Set-Cookie', cookie);\n\n  res.json({\n    loggedIn: true\n  });\n}","map":{"version":3,"sources":["/Users/gabrielasanchez/projects/wolfis-trip/pages/api/login.ts"],"names":["crypto","selectUserByUsername","verifyHashMatchesPassword","login","req","res","username","body","password","users","console","log","length","json","loggedIn","password_hash","maxAge","token","randomBytes","toString"],"mappings":"AAAA,OAAOA,MAAP,MAAmB,QAAnB;AAEA,SAASC,oBAAT,QAAoD,UAApD;AACA,SAAuBC,yBAAvB,QAAwD,eAAxD;AAGA,eAAe,eAAeC,KAAf,CAAqBC,GAArB,EAA0CC,GAA1C,EAAgE;AAC7E;AACA;AACA;AACA,QAAMC,QAAQ,GAAGF,GAAG,CAACG,IAAJ,CAASD,QAA1B;AACA,QAAME,QAAQ,GAAGJ,GAAG,CAACG,IAAJ,CAASC,QAA1B;AACA,QAAMC,KAAK,GAAG,MAAMR,oBAAoB,CAACK,QAAD,EAAWE,QAAX,CAAxC;AAEAE,EAAAA,OAAO,CAACC,GAAR,CAAYP,GAAG,CAACG,IAAJ,CAASD,QAArB;;AACA,MAAIG,KAAK,CAACG,MAAN,KAAiB,CAArB,EAAwB;AACtBF,IAAAA,OAAO,CAACC,GAAR,CAAY,8CAAZ;AACAN,IAAAA,GAAG,CAACQ,IAAJ,CAAS;AAAEC,MAAAA,QAAQ,EAAE;AAAZ,KAAT;AACA;AACD;;AAED,MAAI,EAAE,MAAMZ,yBAAyB,CAACO,KAAK,CAAC,CAAD,CAAL,CAASM,aAAV,EAAyBP,QAAzB,CAAjC,CAAJ,EAA0E;AACxEE,IAAAA,OAAO,CAACC,GAAR,CAAY,uCAAZ;AACAN,IAAAA,GAAG,CAACQ,IAAJ,CAAS;AAAEC,MAAAA,QAAQ,EAAE;AAAZ,KAAT;AACA;AACD;;AAEDJ,EAAAA,OAAO,CAACC,GAAR,CAAY,0BAAZ;AACAD,EAAAA,OAAO,CAACC,GAAR,CAAY,WAAZ;AAEA,QAAMK,MAAM,GAAG,KAAK,EAAL,GAAU,CAAzB,CAxB6E,CAwBjD;;AAC5B,QAAMC,KAAK,GAAGjB,MAAM,CAACkB,WAAP,CAAmB,EAAnB,EAAuBC,QAAvB,CAAgC,QAAhC,CAAd,CAzB6E,CA2B7E;AAEA;AACA;AACA;AAEA;AACA;AACA;AAEA;AACA;AACA;AAEA;AACA;AACA;AAEA;AACA;AACA;AAEA;;AAEAd,EAAAA,GAAG,CAACQ,IAAJ,CAAS;AAAEC,IAAAA,QAAQ,EAAE;AAAZ,GAAT;AACD","sourcesContent":["import crypto from 'crypto';\nimport { serialize } from 'cookie';\nimport { selectUserByUsername, insertSession } from '../../db';\nimport { hashPassword, verifyHashMatchesPassword } from '../../hashing';\nimport { NextApiRequest, NextApiResponse } from 'next';\n\nexport default async function login(req: NextApiRequest, res: NextApiResponse) {\n  // TODO: To secure your application even further,\n  // accept a CSRF token here and verify it\n  // (see pages/register.tsx)\n  const username = req.body.username;\n  const password = req.body.password;\n  const users = await selectUserByUsername(username, password);\n\n  console.log(req.body.username);\n  if (users.length === 0) {\n    console.log('denied login - zero users with that username');\n    res.json({ loggedIn: false });\n    return;\n  }\n\n  if (!(await verifyHashMatchesPassword(users[0].password_hash, password))) {\n    console.log(\"denied login - password doesn't match\");\n    res.json({ loggedIn: false });\n    return;\n  }\n\n  console.log('verifyHasMatchesPassword');\n  console.log('logged in');\n\n  const maxAge = 60 * 60 * 8; // 8 hours\n  const token = crypto.randomBytes(24).toString('base64');\n\n  // await insertSession(users[0].id, token);\n\n  // const cookie = serialize('token', token, {\n  //   maxAge,\n  //   expires: new Date(Date.now() + maxAge * 1000),\n\n  // Important for security\n  // Deny cookie access from JavaScript\n  // httpOnly: true,\n\n  // Important for security\n  // Set secure cookies on production\n  //   secure: process.env.NODE_ENV === 'production',\n\n  //   path: '/',\n  //   sameSite: 'lax',\n  // });\n\n  // TODO: In order to prevent your database\n  // from overflowing with sessions, you should\n  // remove the old sessions here.\n\n  // res.setHeader('Set-Cookie', cookie);\n\n  res.json({ loggedIn: true });\n}\n"]},"metadata":{},"sourceType":"module"}