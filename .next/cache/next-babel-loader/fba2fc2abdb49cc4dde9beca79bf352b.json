{"ast":null,"code":"import React from \"react\";\nvar __jsx = React.createElement;\nimport Head from 'next/head';\nimport Header from '../components/Header';\nimport Link from 'next/link';\n/** @jsx jsx */\n\n/** @jsxFrag React.Fragment */\n\nimport { jsx, css } from '@emotion/core';\nexport default function Register(props) {\n  const app = css`\n    background: #4abdac;\n    min-height: 100vh;\n    font-weight: 400;\n    font-family: 'Karla', sans-serif;\n    width: 100%;\n    position: absolute;\n  `;\n  const form = css`\n    background: #f7b733;\n    width: 15%;\n    height: 70%;\n    position: relative;\n    margin: auto;\n    margin-top: 10%;\n    display: flex;\n    flex-direction: column;\n    align-items: center;\n    justify-content: center;\n    padding: 20px;\n    border-radius: 6px;\n  `;\n  const input = css`\n    line-height: 2.5;\n    margin-bottom: 15px;\n    border-radius: 4px;\n    border: 2px solid #f7b733;\n    margin-top: 20px;\n    font-family: 'Karla', sans-serif;\n  `;\n  const button = css`\n    border-radius: 4px;\n    font-family: 'Karla', sans-serif;\n    font-size: 18px;\n    margin-top: 10px;\n    background: #ffff;\n    border: 2px solid #2f4f4f;\n  `;\n  const forgottenPass = css`\n    text-align: center;\n    color: #2f4f4f;\n    font-size: 18px;\n    font-family: 'Karla', sans-serif;\n    display: flex;\n    flex-direction: column;\n    justify-content: center;\n    margin: 15px;\n    text-decoration: none;\n  `;\n  const logo = css`\n    font-size: 40px;\n    color: #fc4a1a;\n    display: inline-block;\n    margin-left: 20px;\n    margin-top: 20px;\n    font-family: 'Karla', sans-serif;\n    text-decoration: none;\n    border: 2px solid #fc4a1a;\n  `;\n  return jsx(React.Fragment, null, jsx(Head, null, jsx(\"style\", null, \"@import url('https://fonts.googleapis.com/css2?family=Karla&display=swap');\"), jsx(\"title\", null, \"Register\")), jsx(Header, null), jsx(\"div\", {\n    css: app\n  }, jsx(Link, {\n    href: '/index'\n  }, jsx(\"a\", {\n    href: \"#a\",\n    css: logo\n  }, \"Wolfi\")), jsx(\"form\", {\n    method: \"POST\",\n    css: form\n  }, jsx(\"input\", {\n    name: \"username\",\n    css: input\n  }), jsx(\"input\", {\n    name: \"password\",\n    type: \"password\",\n    css: input\n  }), jsx(\"input\", {\n    type: \"hidden\",\n    name: \"csrf\",\n    value: props.csrfToken\n  }), jsx(\"button\", {\n    css: button\n  }, \"Register\")), jsx(\"a\", {\n    href: \"#a\",\n    css: forgottenPass\n  }, \"I forgot my password, send me an email \\u226B\"), jsx(Link, {\n    href: '/login'\n  }, jsx(\"a\", {\n    href: \"#a\",\n    css: forgottenPass\n  }, \"I already have an Account \\u226B\"))));\n}\nexport async function getServerSideProps(context) {\n  // TODO: Do this in an API Route instead!\n  // This also helps to avoid all of the buffer code\n  // and the query-string dependency below!\n  const queryString = await import('query-string');\n  const {\n    insertUser\n  } = await import('../db');\n  const {\n    hashPassword\n  } = await import('../hashing');\n  const Tokens = (await import('csrf')).default;\n  const tokens = new Tokens();\n  const secret = process.env.CSRF_TOKEN;\n\n  if (typeof secret !== 'string') {\n    throw new Error('Token secret misconfigured!');\n  }\n\n  let buffer = '';\n  context.req.on('data', chunk => {\n    buffer += chunk;\n  });\n  context.req.on('end', async () => {\n    const body = queryString.parse(Buffer.from(buffer).toString());\n\n    if (typeof body.username !== 'string' || typeof body.password !== 'string') {\n      console.log('No username or password passed in body');\n      return;\n    }\n\n    const username = body.username;\n    const passwordHash = await hashPassword(body.password);\n    const requestToken = body.csrf;\n\n    if (typeof requestToken !== 'string') {\n      throw new Error('No CSRF token passed!');\n    }\n\n    if (tokens.verify(secret, requestToken)) {\n      // console.log(user);\n      insertUser(username, passwordHash).then(() => console.log('succeeded')).catch(err => console.error(\"didn't work\", err));\n    } else {\n      console.error('CSRF token not valid!!');\n    }\n  });\n  const props = {\n    csrfToken: tokens.create(secret)\n  };\n  return {\n    props\n  };\n}","map":null,"metadata":{},"sourceType":"module"}