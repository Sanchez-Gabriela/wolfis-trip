{"ast":null,"code":"var _jsxFileName = \"/Users/gabrielasanchez/projects/wolfis-trip/pages/register.tsx\";\nimport React from \"react\";\nvar __jsx = React.createElement;\nimport Head from 'next/head';\nimport Header from '../components/Header';\nimport Link from 'next/link';\n/** @jsx jsx */\n\n/** @jsxFrag React.Fragment */\n\nimport { jsx, css } from '@emotion/core';\n\nconst queryString = require('query-string');\n\nexport default function Register(props) {\n  const app = css`\n    background: #4abdac;\n    min-height: 100vh;\n    font-weight: 400;\n    font-family: 'Karla', sans-serif;\n    width: 100%;\n    position: absolute;\n  `;\n  const form = css`\n    background: #f7b733;\n    width: 15%;\n    height: 70%;\n    position: relative;\n    margin: auto;\n    margin-top: 10%;\n    display: flex;\n    flex-direction: column;\n    align-items: center;\n    justify-content: center;\n    padding: 20px;\n    border-radius: 6px;\n  `;\n  const input = css`\n    line-height: 2.5;\n    margin-bottom: 15px;\n    border-radius: 4px;\n    border: 2px solid #f7b733;\n    margin-top: 20px;\n    font-family: 'Karla', sans-serif;\n  `;\n  const button = css`\n    border-radius: 4px;\n    font-family: 'Karla', sans-serif;\n    font-size: 18px;\n    margin-top: 10px;\n    background: #ffff;\n    border: 2px solid #2f4f4f;\n  `;\n  const forgottenPass = css`\n    text-align: center;\n    color: #2f4f4f;\n    font-size: 18px;\n    font-family: 'Karla', sans-serif;\n    display: flex;\n    flex-direction: column;\n    justify-content: center;\n    margin: 15px;\n    text-decoration: none;\n  `;\n  const logo = css`\n    font-size: 40px;\n    color: #fc4a1a;\n    display: inline-block;\n    margin-left: 20px;\n    margin-top: 20px;\n    font-family: 'Karla', sans-serif;\n    text-decoration: none;\n    border: 2px solid #fc4a1a;\n  `;\n  return jsx(React.Fragment, null, jsx(Head, {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 81,\n      columnNumber: 7\n    }\n  }, jsx(\"style\", {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 82,\n      columnNumber: 9\n    }\n  }, \"@import url('https://fonts.googleapis.com/css2?family=Karla&display=swap');\"), jsx(\"title\", {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 86,\n      columnNumber: 9\n    }\n  }, \"Register\")), jsx(Header, {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 89,\n      columnNumber: 7\n    }\n  }), jsx(\"div\", {\n    css: app,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 90,\n      columnNumber: 7\n    }\n  }, jsx(Link, {\n    href: '/index',\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 91,\n      columnNumber: 9\n    }\n  }, jsx(\"a\", {\n    href: \"#a\",\n    css: logo,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 92,\n      columnNumber: 11\n    }\n  }, \"Wolfi\")), jsx(\"form\", {\n    method: \"POST\",\n    css: form,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 96,\n      columnNumber: 9\n    }\n  }, jsx(\"input\", {\n    name: \"username\",\n    css: input,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 97,\n      columnNumber: 11\n    }\n  }), jsx(\"input\", {\n    name: \"password\",\n    type: \"password\",\n    css: input,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 98,\n      columnNumber: 11\n    }\n  }), jsx(\"input\", {\n    type: \"hidden\",\n    name: \"csrf\",\n    value: props.csrfToken,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 99,\n      columnNumber: 11\n    }\n  }), jsx(\"button\", {\n    css: button,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 100,\n      columnNumber: 11\n    }\n  }, \"Register\")), jsx(\"a\", {\n    href: \"#a\",\n    css: forgottenPass,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 102,\n      columnNumber: 9\n    }\n  }, \"I forgot my password, send me an email \\u226B\"), jsx(Link, {\n    href: '/login',\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 105,\n      columnNumber: 9\n    }\n  }, jsx(\"a\", {\n    href: \"#a\",\n    css: forgottenPass,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 106,\n      columnNumber: 11\n    }\n  }, \"I already have an Account \\u226B\"))));\n}\nexport async function getServerSideProps(context) {\n  // TODO: Do this in an API Route instead!\n  // This also helps to avoid all of the buffer code\n  // and the query-string dependency below!\n  const queryString = await import('query-string');\n  const {\n    insertUser\n  } = await import('../db');\n  const {\n    hashPassword\n  } = await import('../hashing');\n\n  require('dotenv').config();\n\n  const Tokens = (await import('csrf')).default;\n  const tokens = new Tokens();\n  const secret = process.env.CSRF_TOKEN;\n\n  if (typeof secret !== 'string') {\n    throw new Error('Token secret misconfigured!');\n  }\n\n  let buffer = '';\n  context.req.on('data', chunk => {\n    buffer += chunk;\n  });\n  context.req.on('end', async () => {\n    const body = queryString.parse(Buffer.from(buffer).toString());\n\n    if (typeof body.username !== 'string' || typeof body.password !== 'string') {\n      console.log('No username or password passed in body');\n      return;\n    }\n\n    const username = body.username;\n    const passwordHash = await hashPassword(body.password); // insertUser(body.username, body.password)\n    //   .then(() => console.log('succeeded'))\n    //   .catch((err) => console.error('did not work', err));\n    // });\n\n    const requestToken = body.csrf;\n    console.log(requestToken);\n\n    if (typeof requestToken !== 'string') {\n      throw new Error('No CSRF token passed!');\n    }\n\n    if (tokens.verify(secret, requestToken)) {\n      // console.log(user);\n      insertUser(username, passwordHash).then(() => console.log('succeeded')).catch(err => console.error(\"didn't work\", err));\n    } else {\n      console.error('CSRF token not valid!!');\n    }\n  });\n  const props = {\n    csrfToken: tokens.create(secret)\n  };\n  return {\n    props\n  };\n}","map":{"version":3,"sources":["/Users/gabrielasanchez/projects/wolfis-trip/pages/register.tsx"],"names":["Head","Header","Link","jsx","css","queryString","require","Register","props","app","form","input","button","forgottenPass","logo","csrfToken","getServerSideProps","context","insertUser","hashPassword","config","Tokens","default","tokens","secret","process","env","CSRF_TOKEN","Error","buffer","req","on","chunk","body","parse","Buffer","from","toString","username","password","console","log","passwordHash","requestToken","csrf","verify","then","catch","err","error","create"],"mappings":";;;AAEA,OAAOA,IAAP,MAAiB,WAAjB;AACA,OAAOC,MAAP,MAAmB,sBAAnB;AACA,OAAOC,IAAP,MAAiB,WAAjB;AACA;;AACA;;AACA,SAASC,GAAT,EAAcC,GAAd,QAAyB,eAAzB;;AACA,MAAMC,WAAW,GAAGC,OAAO,CAAC,cAAD,CAA3B;;AAMA,eAAe,SAASC,QAAT,CAAkBC,KAAlB,EAAgC;AAC7C,QAAMC,GAAG,GAAGL,GAAI;;;;;;;GAAhB;AAQA,QAAMM,IAAI,GAAGN,GAAI;;;;;;;;;;;;;GAAjB;AAeA,QAAMO,KAAK,GAAGP,GAAI;;;;;;;GAAlB;AASA,QAAMQ,MAAM,GAAGR,GAAI;;;;;;;GAAnB;AASA,QAAMS,aAAa,GAAGT,GAAI;;;;;;;;;;GAA1B;AAYA,QAAMU,IAAI,GAAGV,GAAI;;;;;;;;;GAAjB;AAUA,SACE,0BACE,IAAC,IAAD;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,KACE;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,mFADF,EAKE;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,gBALF,CADF,EASE,IAAC,MAAD;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,IATF,EAUE;AAAK,IAAA,GAAG,EAAEK,GAAV;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,KACE,IAAC,IAAD;AAAM,IAAA,IAAI,EAAE,QAAZ;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,KACE;AAAG,IAAA,IAAI,EAAC,IAAR;AAAa,IAAA,GAAG,EAAEK,IAAlB;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,aADF,CADF,EAME;AAAM,IAAA,MAAM,EAAC,MAAb;AAAoB,IAAA,GAAG,EAAEJ,IAAzB;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,KACE;AAAO,IAAA,IAAI,EAAC,UAAZ;AAAuB,IAAA,GAAG,EAAEC,KAA5B;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,IADF,EAEE;AAAO,IAAA,IAAI,EAAC,UAAZ;AAAuB,IAAA,IAAI,EAAC,UAA5B;AAAuC,IAAA,GAAG,EAAEA,KAA5C;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,IAFF,EAGE;AAAO,IAAA,IAAI,EAAC,QAAZ;AAAqB,IAAA,IAAI,EAAC,MAA1B;AAAiC,IAAA,KAAK,EAAEH,KAAK,CAACO,SAA9C;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,IAHF,EAIE;AAAQ,IAAA,GAAG,EAAEH,MAAb;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,gBAJF,CANF,EAYE;AAAG,IAAA,IAAI,EAAC,IAAR;AAAa,IAAA,GAAG,EAAEC,aAAlB;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,qDAZF,EAeE,IAAC,IAAD;AAAM,IAAA,IAAI,EAAE,QAAZ;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,KACE;AAAG,IAAA,IAAI,EAAC,IAAR;AAAa,IAAA,GAAG,EAAEA,aAAlB;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,wCADF,CAfF,CAVF,CADF;AAkCD;AAED,OAAO,eAAeG,kBAAf,CAAkCC,OAAlC,EAAsE;AAC3E;AAEA;AACA;AAEA,QAAMZ,WAAW,GAAG,MAAM,OAAO,cAAP,CAA1B;AACA,QAAM;AAAEa,IAAAA;AAAF,MAAiB,MAAM,OAAO,OAAP,CAA7B;AACA,QAAM;AAAEC,IAAAA;AAAF,MAAmB,MAAM,OAAO,YAAP,CAA/B;;AACAb,EAAAA,OAAO,CAAC,QAAD,CAAP,CAAkBc,MAAlB;;AAEA,QAAMC,MAAM,GAAG,CAAC,MAAM,OAAO,MAAP,CAAP,EAAuBC,OAAtC;AACA,QAAMC,MAAM,GAAG,IAAIF,MAAJ,EAAf;AAEA,QAAMG,MAAM,GAAGC,OAAO,CAACC,GAAR,CAAYC,UAA3B;;AACA,MAAI,OAAOH,MAAP,KAAkB,QAAtB,EAAgC;AAC9B,UAAM,IAAII,KAAJ,CAAU,6BAAV,CAAN;AACD;;AAED,MAAIC,MAAM,GAAG,EAAb;AAEAZ,EAAAA,OAAO,CAACa,GAAR,CAAYC,EAAZ,CAAe,MAAf,EAAwBC,KAAD,IAAW;AAChCH,IAAAA,MAAM,IAAIG,KAAV;AACD,GAFD;AAIAf,EAAAA,OAAO,CAACa,GAAR,CAAYC,EAAZ,CAAe,KAAf,EAAsB,YAAY;AAChC,UAAME,IAAI,GAAG5B,WAAW,CAAC6B,KAAZ,CAAkBC,MAAM,CAACC,IAAP,CAAYP,MAAZ,EAAoBQ,QAApB,EAAlB,CAAb;;AAEA,QACE,OAAOJ,IAAI,CAACK,QAAZ,KAAyB,QAAzB,IACA,OAAOL,IAAI,CAACM,QAAZ,KAAyB,QAF3B,EAGE;AACAC,MAAAA,OAAO,CAACC,GAAR,CAAY,wCAAZ;AACA;AACD;;AAED,UAAMH,QAAQ,GAAGL,IAAI,CAACK,QAAtB;AAEA,UAAMI,YAAY,GAAG,MAAMvB,YAAY,CAACc,IAAI,CAACM,QAAN,CAAvC,CAbgC,CAehC;AACA;AACA;AACA;;AAEA,UAAMI,YAAY,GAAGV,IAAI,CAACW,IAA1B;AAEAJ,IAAAA,OAAO,CAACC,GAAR,CAAYE,YAAZ;;AAEA,QAAI,OAAOA,YAAP,KAAwB,QAA5B,EAAsC;AACpC,YAAM,IAAIf,KAAJ,CAAU,uBAAV,CAAN;AACD;;AAED,QAAIL,MAAM,CAACsB,MAAP,CAAcrB,MAAd,EAAsBmB,YAAtB,CAAJ,EAAyC;AACvC;AACAzB,MAAAA,UAAU,CAACoB,QAAD,EAAWI,YAAX,CAAV,CACGI,IADH,CACQ,MAAMN,OAAO,CAACC,GAAR,CAAY,WAAZ,CADd,EAEGM,KAFH,CAEUC,GAAD,IAASR,OAAO,CAACS,KAAR,CAAc,aAAd,EAA6BD,GAA7B,CAFlB;AAGD,KALD,MAKO;AACLR,MAAAA,OAAO,CAACS,KAAR,CAAc,wBAAd;AACD;AACF,GApCD;AAsCA,QAAMzC,KAAY,GAAG;AACnBO,IAAAA,SAAS,EAAEQ,MAAM,CAAC2B,MAAP,CAAc1B,MAAd;AADQ,GAArB;AAIA,SAAO;AACLhB,IAAAA;AADK,GAAP;AAGD","sourcesContent":["import React from 'react';\nimport { GetServerSidePropsContext } from 'next';\nimport Head from 'next/head';\nimport Header from '../components/Header';\nimport Link from 'next/link';\n/** @jsx jsx */\n/** @jsxFrag React.Fragment */\nimport { jsx, css } from '@emotion/core';\nconst queryString = require('query-string');\n\ntype Props = {\n  csrfToken: string;\n};\n\nexport default function Register(props: Props) {\n  const app = css`\n    background: #4abdac;\n    min-height: 100vh;\n    font-weight: 400;\n    font-family: 'Karla', sans-serif;\n    width: 100%;\n    position: absolute;\n  `;\n  const form = css`\n    background: #f7b733;\n    width: 15%;\n    height: 70%;\n    position: relative;\n    margin: auto;\n    margin-top: 10%;\n    display: flex;\n    flex-direction: column;\n    align-items: center;\n    justify-content: center;\n    padding: 20px;\n    border-radius: 6px;\n  `;\n\n  const input = css`\n    line-height: 2.5;\n    margin-bottom: 15px;\n    border-radius: 4px;\n    border: 2px solid #f7b733;\n    margin-top: 20px;\n    font-family: 'Karla', sans-serif;\n  `;\n\n  const button = css`\n    border-radius: 4px;\n    font-family: 'Karla', sans-serif;\n    font-size: 18px;\n    margin-top: 10px;\n    background: #ffff;\n    border: 2px solid #2f4f4f;\n  `;\n\n  const forgottenPass = css`\n    text-align: center;\n    color: #2f4f4f;\n    font-size: 18px;\n    font-family: 'Karla', sans-serif;\n    display: flex;\n    flex-direction: column;\n    justify-content: center;\n    margin: 15px;\n    text-decoration: none;\n  `;\n\n  const logo = css`\n    font-size: 40px;\n    color: #fc4a1a;\n    display: inline-block;\n    margin-left: 20px;\n    margin-top: 20px;\n    font-family: 'Karla', sans-serif;\n    text-decoration: none;\n    border: 2px solid #fc4a1a;\n  `;\n  return (\n    <>\n      <Head>\n        <style>\n          @import\n          url('https://fonts.googleapis.com/css2?family=Karla&display=swap');\n        </style>\n        <title>Register</title>\n      </Head>\n\n      <Header />\n      <div css={app}>\n        <Link href={'/index'}>\n          <a href=\"#a\" css={logo}>\n            Wolfi\n          </a>\n        </Link>\n        <form method=\"POST\" css={form}>\n          <input name=\"username\" css={input} />\n          <input name=\"password\" type=\"password\" css={input} />\n          <input type=\"hidden\" name=\"csrf\" value={props.csrfToken} />\n          <button css={button}>Register</button>\n        </form>\n        <a href=\"#a\" css={forgottenPass}>\n          I forgot my password, send me an email &#x0226B;\n        </a>\n        <Link href={'/login'}>\n          <a href=\"#a\" css={forgottenPass}>\n            I already have an Account &#x0226B;\n          </a>\n        </Link>\n      </div>\n    </>\n  );\n}\n\nexport async function getServerSideProps(context: GetServerSidePropsContext) {\n  // TODO: Do this in an API Route instead!\n\n  // This also helps to avoid all of the buffer code\n  // and the query-string dependency below!\n\n  const queryString = await import('query-string');\n  const { insertUser } = await import('../db');\n  const { hashPassword } = await import('../hashing');\n  require('dotenv').config();\n\n  const Tokens = (await import('csrf')).default;\n  const tokens = new Tokens();\n\n  const secret = process.env.CSRF_TOKEN;\n  if (typeof secret !== 'string') {\n    throw new Error('Token secret misconfigured!');\n  }\n\n  let buffer = '';\n\n  context.req.on('data', (chunk) => {\n    buffer += chunk;\n  });\n\n  context.req.on('end', async () => {\n    const body = queryString.parse(Buffer.from(buffer).toString());\n\n    if (\n      typeof body.username !== 'string' ||\n      typeof body.password !== 'string'\n    ) {\n      console.log('No username or password passed in body');\n      return;\n    }\n\n    const username = body.username;\n\n    const passwordHash = await hashPassword(body.password);\n\n    // insertUser(body.username, body.password)\n    //   .then(() => console.log('succeeded'))\n    //   .catch((err) => console.error('did not work', err));\n    // });\n\n    const requestToken = body.csrf;\n\n    console.log(requestToken);\n\n    if (typeof requestToken !== 'string') {\n      throw new Error('No CSRF token passed!');\n    }\n\n    if (tokens.verify(secret, requestToken)) {\n      // console.log(user);\n      insertUser(username, passwordHash)\n        .then(() => console.log('succeeded'))\n        .catch((err) => console.error(\"didn't work\", err));\n    } else {\n      console.error('CSRF token not valid!!');\n    }\n  });\n\n  const props: Props = {\n    csrfToken: tokens.create(secret),\n  };\n\n  return {\n    props,\n  };\n}\n"]},"metadata":{},"sourceType":"module"}