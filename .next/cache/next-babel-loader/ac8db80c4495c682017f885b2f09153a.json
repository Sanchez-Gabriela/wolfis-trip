{"ast":null,"code":"import _regeneratorRuntime from \"@babel/runtime/regenerator\";\nimport _taggedTemplateLiteral from \"@babel/runtime/helpers/esm/taggedTemplateLiteral\";\nimport _asyncToGenerator from \"@babel/runtime/helpers/esm/asyncToGenerator\";\n\nfunction _templateObject12() {\n  var data = _taggedTemplateLiteral([\"\\n    SELECT * FROM entriesTags WHERE journey_Id = \", \"\\n  \"]);\n\n  _templateObject12 = function _templateObject12() {\n    return data;\n  };\n\n  return data;\n}\n\nfunction _templateObject11() {\n  var data = _taggedTemplateLiteral([\"\\n    INSERT INTO entriesTags (journey_id, place_id)\\n    SELECT \", \", x\\n      FROM unnest(ARRAY[\", \"]) x\\n  \"]);\n\n  _templateObject11 = function _templateObject11() {\n    return data;\n  };\n\n  return data;\n}\n\nfunction _templateObject10() {\n  var data = _taggedTemplateLiteral([\"\\n    SELECT name, address, image, description FROM places WHERE id IN (\", \") \\n  \"]);\n\n  _templateObject10 = function _templateObject10() {\n    return data;\n  };\n\n  return data;\n}\n\nfunction _templateObject9() {\n  var data = _taggedTemplateLiteral([\"\\n    SELECT places_id, tags_id FROM places_tags WHERE tags_id IN (\", \")\\n  \"]);\n\n  _templateObject9 = function _templateObject9() {\n    return data;\n  };\n\n  return data;\n}\n\nfunction _templateObject8() {\n  var data = _taggedTemplateLiteral([\"\\n    INSERT INTO journeys (start_date, end_date, user_id) VALUES (\", \", \", \", \", \") RETURNING id, start_date, end_date, user_id\\n  \"]);\n\n  _templateObject8 = function _templateObject8() {\n    return data;\n  };\n\n  return data;\n}\n\nfunction _templateObject7() {\n  var data = _taggedTemplateLiteral([\"\\n    SELECT user_id FROM sessions WHERE token = \", \"\\n  \"]);\n\n  _templateObject7 = function _templateObject7() {\n    return data;\n  };\n\n  return data;\n}\n\nfunction _templateObject6() {\n  var data = _taggedTemplateLiteral([\"\\n    INSERT INTO sessions (user_id, token) VALUES (\", \", \", \")\\n  \"]);\n\n  _templateObject6 = function _templateObject6() {\n    return data;\n  };\n\n  return data;\n}\n\nfunction _templateObject5() {\n  var data = _taggedTemplateLiteral([\"\\n    DELETE FROM sessions WHERE token = \", \"\\n  \"]);\n\n  _templateObject5 = function _templateObject5() {\n    return data;\n  };\n\n  return data;\n}\n\nfunction _templateObject4() {\n  var data = _taggedTemplateLiteral([\"\\n    SELECT * FROM sessions WHERE token = \", \"\\n  \"]);\n\n  _templateObject4 = function _templateObject4() {\n    return data;\n  };\n\n  return data;\n}\n\nfunction _templateObject3() {\n  var data = _taggedTemplateLiteral([\"\\n    INSERT INTO users (username, password_hash) VALUES (\", \", \", \")\\n  \"]);\n\n  _templateObject3 = function _templateObject3() {\n    return data;\n  };\n\n  return data;\n}\n\nfunction _templateObject2() {\n  var data = _taggedTemplateLiteral([\"\\n  SELECT * FROM users WHERE username = \", \"\\n  \"]);\n\n  _templateObject2 = function _templateObject2() {\n    return data;\n  };\n\n  return data;\n}\n\nfunction _templateObject() {\n  var data = _taggedTemplateLiteral([\"\\n    select * from places\\n  \"]);\n\n  _templateObject = function _templateObject() {\n    return data;\n  };\n\n  return data;\n}\n\nrequire('dotenv').config();\n\nvar argon2 = require('argon2');\n\nvar postgres = require('postgres');\n\nvar sql = postgres();\nexport function getPlaces() {\n  return _getPlaces.apply(this, arguments);\n}\n\nfunction _getPlaces() {\n  _getPlaces = _asyncToGenerator( /*#__PURE__*/_regeneratorRuntime.mark(function _callee() {\n    var places;\n    return _regeneratorRuntime.wrap(function _callee$(_context) {\n      while (1) {\n        switch (_context.prev = _context.next) {\n          case 0:\n            _context.next = 2;\n            return sql(_templateObject());\n\n          case 2:\n            places = _context.sent;\n            return _context.abrupt(\"return\", places);\n\n          case 4:\n          case \"end\":\n            return _context.stop();\n        }\n      }\n    }, _callee);\n  }));\n  return _getPlaces.apply(this, arguments);\n}\n\nexport function selectUserByUsername(_x, _x2) {\n  return _selectUserByUsername.apply(this, arguments);\n}\n\nfunction _selectUserByUsername() {\n  _selectUserByUsername = _asyncToGenerator( /*#__PURE__*/_regeneratorRuntime.mark(function _callee2(username, password) {\n    var usersWithUsername, passwordMatches;\n    return _regeneratorRuntime.wrap(function _callee2$(_context2) {\n      while (1) {\n        switch (_context2.prev = _context2.next) {\n          case 0:\n            _context2.next = 2;\n            return sql(_templateObject2(), username);\n\n          case 2:\n            usersWithUsername = _context2.sent;\n\n            if (!(usersWithUsername.length === 0)) {\n              _context2.next = 5;\n              break;\n            }\n\n            return _context2.abrupt(\"return\", usersWithUsername);\n\n          case 5:\n            _context2.next = 7;\n            return argon2.verify(usersWithUsername[0].password_hash, password);\n\n          case 7:\n            passwordMatches = _context2.sent;\n\n            if (!passwordMatches) {\n              _context2.next = 12;\n              break;\n            }\n\n            return _context2.abrupt(\"return\", usersWithUsername);\n\n          case 12:\n            return _context2.abrupt(\"return\", []);\n\n          case 13:\n          case \"end\":\n            return _context2.stop();\n        }\n      }\n    }, _callee2);\n  }));\n  return _selectUserByUsername.apply(this, arguments);\n}\n\nexport function insertUser(_x3, _x4) {\n  return _insertUser.apply(this, arguments);\n}\n\nfunction _insertUser() {\n  _insertUser = _asyncToGenerator( /*#__PURE__*/_regeneratorRuntime.mark(function _callee3(username, passwordHash) {\n    return _regeneratorRuntime.wrap(function _callee3$(_context3) {\n      while (1) {\n        switch (_context3.prev = _context3.next) {\n          case 0:\n            return _context3.abrupt(\"return\", sql(_templateObject3(), username, passwordHash));\n\n          case 1:\n          case \"end\":\n            return _context3.stop();\n        }\n      }\n    }, _callee3);\n  }));\n  return _insertUser.apply(this, arguments);\n}\n\nexport function selectSessionByToken(_x5) {\n  return _selectSessionByToken.apply(this, arguments);\n}\n\nfunction _selectSessionByToken() {\n  _selectSessionByToken = _asyncToGenerator( /*#__PURE__*/_regeneratorRuntime.mark(function _callee4(token) {\n    return _regeneratorRuntime.wrap(function _callee4$(_context4) {\n      while (1) {\n        switch (_context4.prev = _context4.next) {\n          case 0:\n            return _context4.abrupt(\"return\", sql(_templateObject4(), token));\n\n          case 1:\n          case \"end\":\n            return _context4.stop();\n        }\n      }\n    }, _callee4);\n  }));\n  return _selectSessionByToken.apply(this, arguments);\n}\n\nexport function deleteSessionByToken(_x6) {\n  return _deleteSessionByToken.apply(this, arguments);\n}\n\nfunction _deleteSessionByToken() {\n  _deleteSessionByToken = _asyncToGenerator( /*#__PURE__*/_regeneratorRuntime.mark(function _callee5(token) {\n    return _regeneratorRuntime.wrap(function _callee5$(_context5) {\n      while (1) {\n        switch (_context5.prev = _context5.next) {\n          case 0:\n            return _context5.abrupt(\"return\", sql(_templateObject5(), token));\n\n          case 1:\n          case \"end\":\n            return _context5.stop();\n        }\n      }\n    }, _callee5);\n  }));\n  return _deleteSessionByToken.apply(this, arguments);\n}\n\nexport function insertSession(_x7, _x8) {\n  return _insertSession.apply(this, arguments);\n}\n\nfunction _insertSession() {\n  _insertSession = _asyncToGenerator( /*#__PURE__*/_regeneratorRuntime.mark(function _callee6(userId, token) {\n    return _regeneratorRuntime.wrap(function _callee6$(_context6) {\n      while (1) {\n        switch (_context6.prev = _context6.next) {\n          case 0:\n            return _context6.abrupt(\"return\", sql(_templateObject6(), userId, token));\n\n          case 1:\n          case \"end\":\n            return _context6.stop();\n        }\n      }\n    }, _callee6);\n  }));\n  return _insertSession.apply(this, arguments);\n}\n\nexport function insertJourney(_x9, _x10, _x11) {\n  return _insertJourney.apply(this, arguments);\n}\n\nfunction _insertJourney() {\n  _insertJourney = _asyncToGenerator( /*#__PURE__*/_regeneratorRuntime.mark(function _callee7(startDate, endDate, token) {\n    var search, userId;\n    return _regeneratorRuntime.wrap(function _callee7$(_context7) {\n      while (1) {\n        switch (_context7.prev = _context7.next) {\n          case 0:\n            _context7.next = 2;\n            return sql(_templateObject7(), token);\n\n          case 2:\n            search = _context7.sent;\n            console.log(search);\n            userId = search[0].user_id;\n            return _context7.abrupt(\"return\", sql(_templateObject8(), startDate, endDate, userId));\n\n          case 6:\n          case \"end\":\n            return _context7.stop();\n        }\n      }\n    }, _callee7);\n  }));\n  return _insertJourney.apply(this, arguments);\n}\n\nfunction getRandomItem(arr) {\n  return arr[Math.floor(Math.random() * arr.length)];\n}\n\nexport function insertEntries(_x12, _x13) {\n  return _insertEntries.apply(this, arguments);\n}\n\nfunction _insertEntries() {\n  _insertEntries = _asyncToGenerator( /*#__PURE__*/_regeneratorRuntime.mark(function _callee8(tagIds, journeyId) {\n    var placesAndTags, selectedPlacesAndTags, places, tagArray;\n    return _regeneratorRuntime.wrap(function _callee8$(_context8) {\n      while (1) {\n        switch (_context8.prev = _context8.next) {\n          case 0:\n            _context8.next = 2;\n            return sql(_templateObject9(), tagIds);\n\n          case 2:\n            placesAndTags = _context8.sent;\n            console.log('placesandTags:', placesAndTags);\n            console.log('tagIds', tagIds); // tag gives a random number from the places_id column\n\n            selectedPlacesAndTags = [];\n            tagIds.forEach(function (tagId) {\n              // these are the placesIds based on the tagId\n              var placesByTag = placesAndTags.filter(function (placeAndTag) {\n                return placeAndTag.tags_id === Number(tagId);\n              });\n              var selectedPlaceAndTag = getRandomItem(placesByTag);\n              selectedPlacesAndTags.push(selectedPlaceAndTag);\n              console.log('selectedplaces:', selectedPlacesAndTags);\n            });\n            console.log('selectedplaces:', selectedPlacesAndTags);\n            places = selectedPlacesAndTags.map(function (place_id) {\n              console.log(place_id);\n              return place_id.places_id;\n            });\n            console.log('places', places);\n            _context8.next = 12;\n            return sql(_templateObject10(), places);\n\n          case 12:\n            tagArray = _context8.sent;\n            console.log('tagArray', tagArray);\n            _context8.next = 16;\n            return sql(_templateObject11(), journeyId, places);\n\n          case 16:\n            return _context8.abrupt(\"return\", places);\n\n          case 17:\n          case \"end\":\n            return _context8.stop();\n        }\n      }\n    }, _callee8);\n  }));\n  return _insertEntries.apply(this, arguments);\n}\n\nexport function journeysUser(_x14) {\n  return _journeysUser.apply(this, arguments);\n}\n\nfunction _journeysUser() {\n  _journeysUser = _asyncToGenerator( /*#__PURE__*/_regeneratorRuntime.mark(function _callee9(journeyId) {\n    var journey;\n    return _regeneratorRuntime.wrap(function _callee9$(_context9) {\n      while (1) {\n        switch (_context9.prev = _context9.next) {\n          case 0:\n            _context9.next = 2;\n            return sql(_templateObject12(), journeyId);\n\n          case 2:\n            journey = _context9.sent;\n            return _context9.abrupt(\"return\", journey);\n\n          case 4:\n          case \"end\":\n            return _context9.stop();\n        }\n      }\n    }, _callee9);\n  }));\n  return _journeysUser.apply(this, arguments);\n}","map":{"version":3,"sources":["/Users/gabrielasanchez/projects/wolfis-trip/db.js"],"names":["require","config","argon2","postgres","sql","getPlaces","places","selectUserByUsername","username","password","usersWithUsername","length","verify","password_hash","passwordMatches","insertUser","passwordHash","selectSessionByToken","token","deleteSessionByToken","insertSession","userId","insertJourney","startDate","endDate","search","console","log","user_id","getRandomItem","arr","Math","floor","random","insertEntries","tagIds","journeyId","placesAndTags","selectedPlacesAndTags","forEach","tagId","placesByTag","filter","placeAndTag","tags_id","Number","selectedPlaceAndTag","push","map","place_id","places_id","tagArray","journeysUser","journey"],"mappings":"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","sourcesContent":["require('dotenv').config();\n\nconst argon2 = require('argon2');\nconst postgres = require('postgres');\nconst sql = postgres();\n\nexport async function getPlaces() {\n  const places = await sql`\n    select * from places\n  `;\n  return places;\n}\n\nexport async function selectUserByUsername(username, password) {\n  const usersWithUsername = await sql`\n  SELECT * FROM users WHERE username = ${username}\n  `; //select from always returns an array, even if its one\n  // console.log(usersWithUsername[0]);\n  if (usersWithUsername.length === 0) return usersWithUsername;\n  const passwordMatches = await argon2.verify(\n    usersWithUsername[0].password_hash,\n    password,\n  ); //this returns boolean\n  if (passwordMatches) {\n    return usersWithUsername;\n  } else {\n    return [];\n  }\n}\n\nexport async function insertUser(username, passwordHash) {\n  return sql`\n    INSERT INTO users (username, password_hash) VALUES (${username}, ${passwordHash})\n  `;\n}\n\nexport async function selectSessionByToken(token) {\n  return sql`\n    SELECT * FROM sessions WHERE token = ${token}\n  `;\n}\n\nexport async function deleteSessionByToken(token) {\n  return sql`\n    DELETE FROM sessions WHERE token = ${token}\n  `;\n}\n\nexport async function insertSession(userId, token) {\n  return sql`\n    INSERT INTO sessions (user_id, token) VALUES (${userId}, ${token})\n  `;\n}\n\nexport async function insertJourney(startDate, endDate, token) {\n  const search = await sql`\n    SELECT user_id FROM sessions WHERE token = ${token}\n  `;\n  console.log(search);\n\n  const userId = search[0].user_id;\n\n  return sql`\n    INSERT INTO journeys (start_date, end_date, user_id) VALUES (${startDate}, ${endDate}, ${userId}) RETURNING id, start_date, end_date, user_id\n  `;\n}\nfunction getRandomItem(arr) {\n  return arr[Math.floor(Math.random() * arr.length)];\n}\n\nexport async function insertEntries(tagIds, journeyId) {\n  // selectedTags shows me places_id column based tags_id\n  const placesAndTags = await sql`\n    SELECT places_id, tags_id FROM places_tags WHERE tags_id IN (${tagIds})\n  `;\n  console.log('placesandTags:', placesAndTags);\n  console.log('tagIds', tagIds);\n\n  // tag gives a random number from the places_id column\n  const selectedPlacesAndTags = [];\n  tagIds.forEach((tagId) => {\n    // these are the placesIds based on the tagId\n    const placesByTag = placesAndTags.filter((placeAndTag) => {\n      return placeAndTag.tags_id === Number(tagId);\n    });\n    const selectedPlaceAndTag = getRandomItem(placesByTag);\n    selectedPlacesAndTags.push(selectedPlaceAndTag);\n    console.log('selectedplaces:', selectedPlacesAndTags);\n  });\n\n  console.log('selectedplaces:', selectedPlacesAndTags);\n  const places = selectedPlacesAndTags.map((place_id) => {\n    console.log(place_id);\n    return place_id.places_id;\n  });\n\n  console.log('places', places);\n  const tagArray = await sql`\n    SELECT name, address, image, description FROM places WHERE id IN (${places}) \n  `;\n\n  console.log('tagArray', tagArray);\n\n  await sql`\n    INSERT INTO entriesTags (journey_id, place_id)\n    SELECT ${journeyId}, x\n      FROM unnest(ARRAY[${places}]) x\n  `;\n\n  return places;\n}\n\nexport async function journeysUser(journeyId) {\n  const journey = await sql`\n    SELECT * FROM entriesTags WHERE journey_Id = ${journeyId}\n  `;\n\n  return journey;\n}\n"]},"metadata":{},"sourceType":"module"}