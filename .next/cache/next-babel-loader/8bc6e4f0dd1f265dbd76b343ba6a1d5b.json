{"ast":null,"code":"import crypto from 'crypto';\nimport { serialize } from 'cookie';\nimport { selectUserByUsername, insertSession } from '../../db';\nimport { verifyHashMatchesPassword } from '../../hashing';\nexport default async function login(req, res) {\n  // TODO: To secure your application even further,\n  // accept a CSRF token here and verify it\n  // (see pages/register.tsx)\n  const username = req.body.username;\n  const password = req.body.password;\n  const users = await selectUserByUsername(username);\n\n  if (users.length === 0) {\n    console.log('denied login - zero users with that username');\n    res.json({\n      loggedIn: false\n    });\n    return;\n  }\n\n  if (!(await verifyHashMatchesPassword(users[0].password_hash, password))) {\n    console.log(\"denied login - password doesn't match\");\n    res.json({\n      loggedIn: false\n    });\n    return;\n  }\n\n  console.log('logged in');\n  const maxAge = 60 * 60 * 8; // 8 hours\n\n  const token = crypto.randomBytes(24).toString('base64');\n  await insertSession(users[0].id, token);\n  const cookie = serialize('token', token, {\n    maxAge,\n    expires: new Date(Date.now() + maxAge * 1000),\n    // Important for security\n    // Deny cookie access from JavaScript\n    httpOnly: true,\n    // Important for security\n    // Set secure cookies on production\n    secure: true,\n    path: '/',\n    sameSite: 'lax'\n  }); // TODO: In order to prevent your database\n  // from overflowing with sessions, you should\n  // remove the old sessions here.\n\n  res.setHeader('Set-Cookie', cookie);\n  res.json({\n    loggedIn: true\n  });\n}","map":null,"metadata":{},"sourceType":"module"}