{"ast":null,"code":"import _regeneratorRuntime from \"@babel/runtime/regenerator\";\nimport _taggedTemplateLiteral from \"@babel/runtime/helpers/esm/taggedTemplateLiteral\";\nimport _asyncToGenerator from \"@babel/runtime/helpers/esm/asyncToGenerator\";\n\nfunction _templateObject7() {\n  var data = _taggedTemplateLiteral([\"\\n    INSERT INTO journeys (start_date, end_date, user_id) VALUES (\", \", \", \", \", \")\\n  \"]);\n\n  _templateObject7 = function _templateObject7() {\n    return data;\n  };\n\n  return data;\n}\n\nfunction _templateObject6() {\n  var data = _taggedTemplateLiteral([\"\\n    INSERT INTO sessions (user_id, token) VALUES (\", \", \", \")\\n  \"]);\n\n  _templateObject6 = function _templateObject6() {\n    return data;\n  };\n\n  return data;\n}\n\nfunction _templateObject5() {\n  var data = _taggedTemplateLiteral([\"\\n    DELETE FROM sessions WHERE token = \", \"\\n  \"]);\n\n  _templateObject5 = function _templateObject5() {\n    return data;\n  };\n\n  return data;\n}\n\nfunction _templateObject4() {\n  var data = _taggedTemplateLiteral([\"\\n    SELECT * FROM sessions WHERE token = \", \"\\n  \"]);\n\n  _templateObject4 = function _templateObject4() {\n    return data;\n  };\n\n  return data;\n}\n\nfunction _templateObject3() {\n  var data = _taggedTemplateLiteral([\"\\n    INSERT INTO users (username, password_hash) VALUES (\", \", \", \")\\n  \"]);\n\n  _templateObject3 = function _templateObject3() {\n    return data;\n  };\n\n  return data;\n}\n\nfunction _templateObject2() {\n  var data = _taggedTemplateLiteral([\"\\n  SELECT * FROM users WHERE username = \", \"\\n  \"]);\n\n  _templateObject2 = function _templateObject2() {\n    return data;\n  };\n\n  return data;\n}\n\nfunction _templateObject() {\n  var data = _taggedTemplateLiteral([\"\\n    select * from places\\n  \"]);\n\n  _templateObject = function _templateObject() {\n    return data;\n  };\n\n  return data;\n}\n\nrequire('dotenv').config();\n\nvar argon2 = require('argon2');\n\nvar postgres = require('postgres');\n\nvar sql = postgres();\nexport function getPlaces() {\n  return _getPlaces.apply(this, arguments);\n}\n\nfunction _getPlaces() {\n  _getPlaces = _asyncToGenerator( /*#__PURE__*/_regeneratorRuntime.mark(function _callee() {\n    var places;\n    return _regeneratorRuntime.wrap(function _callee$(_context) {\n      while (1) {\n        switch (_context.prev = _context.next) {\n          case 0:\n            _context.next = 2;\n            return sql(_templateObject());\n\n          case 2:\n            places = _context.sent;\n            return _context.abrupt(\"return\", places);\n\n          case 4:\n          case \"end\":\n            return _context.stop();\n        }\n      }\n    }, _callee);\n  }));\n  return _getPlaces.apply(this, arguments);\n}\n\nexport function selectUserByUsername(_x, _x2) {\n  return _selectUserByUsername.apply(this, arguments);\n}\n\nfunction _selectUserByUsername() {\n  _selectUserByUsername = _asyncToGenerator( /*#__PURE__*/_regeneratorRuntime.mark(function _callee2(username, password) {\n    var usersWithUsername, passwordMatches;\n    return _regeneratorRuntime.wrap(function _callee2$(_context2) {\n      while (1) {\n        switch (_context2.prev = _context2.next) {\n          case 0:\n            _context2.next = 2;\n            return sql(_templateObject2(), username);\n\n          case 2:\n            usersWithUsername = _context2.sent;\n\n            if (!(usersWithUsername.length === 0)) {\n              _context2.next = 5;\n              break;\n            }\n\n            return _context2.abrupt(\"return\", usersWithUsername);\n\n          case 5:\n            _context2.next = 7;\n            return argon2.verify(usersWithUsername[0].password_hash, password);\n\n          case 7:\n            passwordMatches = _context2.sent;\n\n            if (!passwordMatches) {\n              _context2.next = 12;\n              break;\n            }\n\n            return _context2.abrupt(\"return\", usersWithUsername);\n\n          case 12:\n            return _context2.abrupt(\"return\", []);\n\n          case 13:\n          case \"end\":\n            return _context2.stop();\n        }\n      }\n    }, _callee2);\n  }));\n  return _selectUserByUsername.apply(this, arguments);\n}\n\nexport function insertUser(_x3, _x4) {\n  return _insertUser.apply(this, arguments);\n}\n\nfunction _insertUser() {\n  _insertUser = _asyncToGenerator( /*#__PURE__*/_regeneratorRuntime.mark(function _callee3(username, passwordHash) {\n    return _regeneratorRuntime.wrap(function _callee3$(_context3) {\n      while (1) {\n        switch (_context3.prev = _context3.next) {\n          case 0:\n            return _context3.abrupt(\"return\", sql(_templateObject3(), username, passwordHash));\n\n          case 1:\n          case \"end\":\n            return _context3.stop();\n        }\n      }\n    }, _callee3);\n  }));\n  return _insertUser.apply(this, arguments);\n}\n\nexport function selectSessionByToken(_x5) {\n  return _selectSessionByToken.apply(this, arguments);\n}\n\nfunction _selectSessionByToken() {\n  _selectSessionByToken = _asyncToGenerator( /*#__PURE__*/_regeneratorRuntime.mark(function _callee4(token) {\n    return _regeneratorRuntime.wrap(function _callee4$(_context4) {\n      while (1) {\n        switch (_context4.prev = _context4.next) {\n          case 0:\n            return _context4.abrupt(\"return\", sql(_templateObject4(), token));\n\n          case 1:\n          case \"end\":\n            return _context4.stop();\n        }\n      }\n    }, _callee4);\n  }));\n  return _selectSessionByToken.apply(this, arguments);\n}\n\nexport function deleteSessionByToken(_x6) {\n  return _deleteSessionByToken.apply(this, arguments);\n}\n\nfunction _deleteSessionByToken() {\n  _deleteSessionByToken = _asyncToGenerator( /*#__PURE__*/_regeneratorRuntime.mark(function _callee5(token) {\n    return _regeneratorRuntime.wrap(function _callee5$(_context5) {\n      while (1) {\n        switch (_context5.prev = _context5.next) {\n          case 0:\n            return _context5.abrupt(\"return\", sql(_templateObject5(), token));\n\n          case 1:\n          case \"end\":\n            return _context5.stop();\n        }\n      }\n    }, _callee5);\n  }));\n  return _deleteSessionByToken.apply(this, arguments);\n}\n\nexport function insertSession(_x7, _x8) {\n  return _insertSession.apply(this, arguments);\n}\n\nfunction _insertSession() {\n  _insertSession = _asyncToGenerator( /*#__PURE__*/_regeneratorRuntime.mark(function _callee6(userId, token) {\n    return _regeneratorRuntime.wrap(function _callee6$(_context6) {\n      while (1) {\n        switch (_context6.prev = _context6.next) {\n          case 0:\n            return _context6.abrupt(\"return\", sql(_templateObject6(), userId, token));\n\n          case 1:\n          case \"end\":\n            return _context6.stop();\n        }\n      }\n    }, _callee6);\n  }));\n  return _insertSession.apply(this, arguments);\n}\n\nexport function insertJourneys(_x9, _x10, _x11) {\n  return _insertJourneys.apply(this, arguments);\n} // export async function insertJourneyEntries(journeyId, placeId, date, order) {\n//   return sql`\n//     INSERT INTO journeyentries (journey_id, place_id, date, order) VALUES (${journeyId}, ${placeId}, ${date}, ${order})\n//   `;\n// }\n\nfunction _insertJourneys() {\n  _insertJourneys = _asyncToGenerator( /*#__PURE__*/_regeneratorRuntime.mark(function _callee7(startDate, endDate, userId) {\n    return _regeneratorRuntime.wrap(function _callee7$(_context7) {\n      while (1) {\n        switch (_context7.prev = _context7.next) {\n          case 0:\n            return _context7.abrupt(\"return\", sql(_templateObject7(), startDate, endDate, userId));\n\n          case 1:\n          case \"end\":\n            return _context7.stop();\n        }\n      }\n    }, _callee7);\n  }));\n  return _insertJourneys.apply(this, arguments);\n}","map":{"version":3,"sources":["/Users/gabrielasanchez/projects/wolfis-trip/db.js"],"names":["require","config","argon2","postgres","sql","getPlaces","places","selectUserByUsername","username","password","usersWithUsername","length","verify","password_hash","passwordMatches","insertUser","passwordHash","selectSessionByToken","token","deleteSessionByToken","insertSession","userId","insertJourneys","startDate","endDate"],"mappings":";;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;AAAAA,OAAO,CAAC,QAAD,CAAP,CAAkBC,MAAlB;;AAEA,IAAMC,MAAM,GAAGF,OAAO,CAAC,QAAD,CAAtB;;AACA,IAAMG,QAAQ,GAAGH,OAAO,CAAC,UAAD,CAAxB;;AACA,IAAMI,GAAG,GAAGD,QAAQ,EAApB;AAEA,gBAAsBE,SAAtB;AAAA;AAAA;;;wEAAO;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,mBACgBD,GADhB;;AAAA;AACCE,YAAAA,MADD;AAAA,6CAIEA,MAJF;;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,G;;;;AAOP,gBAAsBC,oBAAtB;AAAA;AAAA;;;mFAAO,kBAAoCC,QAApC,EAA8CC,QAA9C;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,mBAC2BL,GAD3B,qBAEkCI,QAFlC;;AAAA;AACCE,YAAAA,iBADD;;AAAA,kBAKDA,iBAAiB,CAACC,MAAlB,KAA6B,CAL5B;AAAA;AAAA;AAAA;;AAAA,8CAKsCD,iBALtC;;AAAA;AAAA;AAAA,mBAMyBR,MAAM,CAACU,MAAP,CAC5BF,iBAAiB,CAAC,CAAD,CAAjB,CAAqBG,aADO,EAE5BJ,QAF4B,CANzB;;AAAA;AAMCK,YAAAA,eAND;;AAAA,iBAUDA,eAVC;AAAA;AAAA;AAAA;;AAAA,8CAWIJ,iBAXJ;;AAAA;AAAA,8CAaI,EAbJ;;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,G;;;;AAiBP,gBAAsBK,UAAtB;AAAA;AAAA;;;yEAAO,kBAA0BP,QAA1B,EAAoCQ,YAApC;AAAA;AAAA;AAAA;AAAA;AAAA,8CACEZ,GADF,qBAEmDI,QAFnD,EAEgEQ,YAFhE;;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,G;;;;AAMP,gBAAsBC,oBAAtB;AAAA;AAAA;;;mFAAO,kBAAoCC,KAApC;AAAA;AAAA;AAAA;AAAA;AAAA,8CACEd,GADF,qBAEoCc,KAFpC;;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,G;;;;AAMP,gBAAsBC,oBAAtB;AAAA;AAAA;;;mFAAO,kBAAoCD,KAApC;AAAA;AAAA;AAAA;AAAA;AAAA,8CACEd,GADF,qBAEkCc,KAFlC;;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,G;;;;AAMP,gBAAsBE,aAAtB;AAAA;AAAA;;;4EAAO,kBAA6BC,MAA7B,EAAqCH,KAArC;AAAA;AAAA;AAAA;AAAA;AAAA,8CACEd,GADF,qBAE6CiB,MAF7C,EAEwDH,KAFxD;;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,G;;;;AAMP,gBAAsBI,cAAtB;AAAA;AAAA,C,CAMA;AACA;AACA;AACA;AACA;;;6EAVO,kBAA8BC,SAA9B,EAAyCC,OAAzC,EAAkDH,MAAlD;AAAA;AAAA;AAAA;AAAA;AAAA,8CACEjB,GADF,qBAE4DmB,SAF5D,EAE0EC,OAF1E,EAEsFH,MAFtF;;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,G","sourcesContent":["require('dotenv').config();\n\nconst argon2 = require('argon2');\nconst postgres = require('postgres');\nconst sql = postgres();\n\nexport async function getPlaces() {\n  const places = await sql`\n    select * from places\n  `;\n  return places;\n}\n\nexport async function selectUserByUsername(username, password) {\n  const usersWithUsername = await sql`\n  SELECT * FROM users WHERE username = ${username}\n  `; //select from always returns an array, even if its one\n  // console.log(usersWithUsername[0]);\n  if (usersWithUsername.length === 0) return usersWithUsername;\n  const passwordMatches = await argon2.verify(\n    usersWithUsername[0].password_hash,\n    password,\n  ); //this returns boolean\n  if (passwordMatches) {\n    return usersWithUsername;\n  } else {\n    return [];\n  }\n}\n\nexport async function insertUser(username, passwordHash) {\n  return sql`\n    INSERT INTO users (username, password_hash) VALUES (${username}, ${passwordHash})\n  `;\n}\n\nexport async function selectSessionByToken(token) {\n  return sql`\n    SELECT * FROM sessions WHERE token = ${token}\n  `;\n}\n\nexport async function deleteSessionByToken(token) {\n  return sql`\n    DELETE FROM sessions WHERE token = ${token}\n  `;\n}\n\nexport async function insertSession(userId, token) {\n  return sql`\n    INSERT INTO sessions (user_id, token) VALUES (${userId}, ${token})\n  `;\n}\n\nexport async function insertJourneys(startDate, endDate, userId) {\n  return sql`\n    INSERT INTO journeys (start_date, end_date, user_id) VALUES (${startDate}, ${endDate}, ${userId})\n  `;\n}\n\n// export async function insertJourneyEntries(journeyId, placeId, date, order) {\n//   return sql`\n//     INSERT INTO journeyentries (journey_id, place_id, date, order) VALUES (${journeyId}, ${placeId}, ${date}, ${order})\n//   `;\n// }\n"]},"metadata":{},"sourceType":"module"}